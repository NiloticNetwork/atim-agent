#!/usr/bin/env python3

"""
Atim AI Assistant - GitHub App Implementation
============================================

This module implements Atim as a proper GitHub App using JWT authentication
and installation access tokens. This is the modern, secure approach for bots.
"""

import os
import jwt
import time
import json
import requests
from datetime import datetime
from typing import Dict, List, Optional
from github import Github, GithubException
from github.Auth import AppAuth
from dotenv import load_dotenv

class AtimGitHubApp:
    """Atim's GitHub App implementation with proper authentication"""
    
    def __init__(self):
        load_dotenv()
        
        # GitHub App credentials
        self.app_id = os.environ.get('GITHUB_APP_ID')
        self.private_key_path = os.environ.get('GITHUB_APP_PRIVATE_KEY_PATH')
        self.installation_id = os.environ.get('GITHUB_APP_INSTALLATION_ID')
        self.repo_name = os.environ.get('GITHUB_REPO', 'NiloticNetwork/NiloticNetworkBlockchain')
        
        # App configuration
        self.app_name = "Atim AI Assistant"
        self.app_description = "AI-powered blockchain development assistant for the Nilotic Network"
        self.app_signature = "🤖 *Generated by Atim AI Assistant*"
        
        # Initialize GitHub client
        self.github = None
        self.repo = None
        self._initialize_github_app()
        
    def _initialize_github_app(self):
        """Initialize GitHub App authentication"""
        if not all([self.app_id, self.private_key_path, self.installation_id]):
            print("⚠️  GitHub App credentials not fully configured.")
            print("   Required: GITHUB_APP_ID, GITHUB_APP_PRIVATE_KEY_PATH, GITHUB_APP_INSTALLATION_ID")
            return
            
        try:
            # Generate JWT for app authentication
            jwt_token = self._generate_jwt()
            
            # Get installation access token
            access_token = self._get_installation_token(jwt_token)
            
            # Initialize GitHub client with app authentication
            self.github = Github(auth=AppAuth(self.app_id, access_token))
            
            # Test repository access
            self.repo = self.github.get_repo(self.repo_name)
            print(f"🤖 Atim GitHub App authenticated successfully")
            print(f"✅ App can access repository: {self.repo.full_name}")
            
        except Exception as e:
            print(f"❌ Atim GitHub App authentication failed: {e}")
            self.github = None
            self.repo = None
    
    def _generate_jwt(self) -> str:
        """Generate JWT for GitHub App authentication"""
        try:
            with open(self.private_key_path, 'r') as f:
                private_key = f.read()
            
            payload = {
                'iat': int(time.time()),
                'exp': int(time.time()) + 600,  # 10 minutes
                'iss': int(self.app_id)
            }
            
            return jwt.encode(payload, private_key, algorithm='RS256')
            
        except Exception as e:
            raise Exception(f"Failed to generate JWT: {e}")
    
    def _get_installation_token(self, jwt_token: str) -> str:
        """Get installation access token"""
        headers = {
            'Authorization': f'Bearer {jwt_token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        response = requests.post(
            f'https://api.github.com/app/installations/{self.installation_id}/access_tokens',
            headers=headers
        )
        
        if response.status_code == 201:
            return response.json()['token']
        else:
            raise Exception(f"Failed to get installation token: {response.text}")
    
    def create_issue(self, title: str, description: str, labels: List[str] = None, 
                    severity: str = "medium", category: str = "enhancement") -> Optional[int]:
        """Create a GitHub issue as Atim App"""
        if not self.repo:
            print("❌ Atim App cannot access GitHub repository")
            return None
            
        try:
            # Prepare issue body with Atim's signature
            body = f"""
{description}

**Analysis Details:**
- **Severity:** {severity}
- **Category:** {category}
- **Detected by:** Atim AI Assistant
- **Timestamp:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

{self.app_signature}
            """.strip()
            
            # Create the issue
            issue = self.repo.create_issue(
                title=title,
                body=body,
                labels=labels or []
            )
            
            print(f"🤖 Atim App created issue: #{issue.number} - {title}")
            return issue.number
            
        except GithubException as e:
            print(f"❌ Atim App failed to create issue: {e}")
            return None
    
    def create_pull_request(self, title: str, body: str, branch: str, 
                          base: str = "main") -> Optional[int]:
        """Create a pull request as Atim App"""
        if not self.repo:
            print("❌ Atim App cannot access GitHub repository")
            return None
            
        try:
            # Prepare PR body with Atim's signature
            pr_body = f"""
{body}

**AI-Generated Changes:**
This pull request was automatically generated by Atim AI Assistant based on code analysis and issue detection.

{self.app_signature}
            """.strip()
            
            # Create the pull request
            pr = self.repo.create_pull(
                title=title,
                body=pr_body,
                head=branch,
                base=base
            )
            
            print(f"🤖 Atim App created PR: #{pr.number} - {title}")
            return pr.number
            
        except GithubException as e:
            print(f"❌ Atim App failed to create PR: {e}")
            return None
    
    def comment_on_issue(self, issue_number: int, comment: str) -> bool:
        """Comment on an issue as Atim App"""
        if not self.repo:
            return False
            
        try:
            issue = self.repo.get_issue(issue_number)
            issue.create_comment(f"{comment}\n\n{self.app_signature}")
            print(f"🤖 Atim App commented on issue #{issue_number}")
            return True
        except GithubException as e:
            print(f"❌ Atim App failed to comment: {e}")
            return False
    
    def get_repository_stats(self) -> Dict:
        """Get repository statistics as Atim App"""
        if not self.repo:
            return {
                'name': self.repo_name,
                'app_status': 'offline',
                'open_issues': 0,
                'open_pulls': 0,
                'stars': 0,
                'forks': 0
            }
        
        try:
            return {
                'name': self.repo.full_name,
                'app_status': 'online',
                'app_name': self.app_name,
                'open_issues': self.repo.open_issues_count,
                'open_pulls': len(list(self.repo.get_pulls(state='open'))),
                'stars': self.repo.stargazers_count,
                'forks': self.repo.forks_count,
                'language': self.repo.language or 'C++'
            }
        except GithubException as e:
            print(f"❌ Atim App failed to get stats: {e}")
            return {'app_status': 'error'}
    
    def analyze_repository(self) -> List[Dict]:
        """Analyze repository and generate issue proposals as Atim App"""
        if not self.repo:
            return []
        
        proposals = []
        
        try:
            # Get recent commits
            commits = list(self.repo.get_commits()[:10])
            
            # Analyze for potential issues
            for commit in commits:
                if "fix" in commit.commit.message.lower():
                    proposals.append({
                        'type': 'fix',
                        'title': f"Review fix in commit: {commit.sha[:7]}",
                        'description': f"Commit message: {commit.commit.message}",
                        'severity': 'medium',
                        'category': 'code-review'
                    })
            
            # Add some AI-generated proposals
            proposals.extend([
                {
                    'type': 'ai-analysis',
                    'title': 'Implement comprehensive error handling',
                    'description': 'Code analysis suggests adding try-catch blocks in critical sections',
                    'severity': 'high',
                    'category': 'security'
                },
                {
                    'type': 'ai-analysis', 
                    'title': 'Add unit tests for core functionality',
                    'description': 'AI detected missing test coverage in blockchain core modules',
                    'severity': 'medium',
                    'category': 'testing'
                }
            ])
            
        except GithubException as e:
            print(f"❌ Atim App failed to analyze repository: {e}")
        
        return proposals
    
    def get_app_info(self) -> Dict:
        """Get information about the GitHub App"""
        return {
            'app_name': self.app_name,
            'app_id': self.app_id,
            'installation_id': self.installation_id,
            'repository': self.repo_name,
            'description': self.app_description
        }

def create_atim_app() -> AtimGitHubApp:
    """Create Atim's GitHub App instance"""
    return AtimGitHubApp()

# Test function
def test_atim_app():
    """Test Atim's GitHub App functionality"""
    print("🤖 Testing Atim GitHub App...")
    print("=" * 50)
    
    app = create_atim_app()
    
    # Test repository access
    stats = app.get_repository_stats()
    print(f"Repository: {stats.get('name', 'Unknown')}")
    print(f"App Status: {stats.get('app_status', 'Unknown')}")
    
    if stats.get('app_status') == 'online':
        print("✅ Atim GitHub App is ready!")
        
        # Show app info
        app_info = app.get_app_info()
        print(f"App Name: {app_info['app_name']}")
        print(f"App ID: {app_info['app_id']}")
        print(f"Installation ID: {app_info['installation_id']}")
        
        # Test issue creation (optional)
        # issue_number = app.create_issue(
        #     title="Test Issue from Atim App",
        #     description="This is a test issue created by Atim AI Assistant GitHub App.",
        #     labels=["test", "ai-generated"]
        # )
        # if issue_number:
        #     print(f"✅ Test issue created: #{issue_number}")
        
    else:
        print("❌ Atim GitHub App is offline. Check GitHub App configuration.")
    
    print("=" * 50)

if __name__ == "__main__":
    test_atim_app() 