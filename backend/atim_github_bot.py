#!/usr/bin/env python3

"""
Atim AI Assistant - GitHub Bot Configuration
============================================

This module handles Atim's own GitHub identity and operations.
Atim will have its own GitHub account and token for autonomous operations.
"""

import os
import json
import time
from datetime import datetime
from typing import Dict, List, Optional
from github import Github, GithubException
from dotenv import load_dotenv

class AtimGitHubBot:
    """Atim's dedicated GitHub bot for autonomous operations"""
    
    def __init__(self):
        load_dotenv()
        
        # Atim's GitHub credentials
        self.github_token = os.environ.get('ATIM_GITHUB_TOKEN')
        self.github_username = os.environ.get('ATIM_GITHUB_USERNAME', 'atim-ai-assistant')
        self.repo_name = os.environ.get('ATIM_TARGET_REPO', 'NiloticNetwork/NiloticNetworkBlockchain')
        
        # Initialize GitHub client
        self.github = None
        self.repo = None
        self._initialize_github()
        
        # Bot configuration
        self.bot_name = "Atim AI Assistant"
        self.bot_description = "AI-powered blockchain development assistant for the Nilotic Network"
        self.bot_signature = "ü§ñ *Generated by Atim AI Assistant*"
        
    def _initialize_github(self):
        """Initialize GitHub connection for Atim"""
        if not self.github_token:
            print("‚ö†Ô∏è  ATIM_GITHUB_TOKEN not set. Atim will use fallback mode.")
            return
            
        try:
            self.github = Github(self.github_token)
            user = self.github.get_user()
            print(f"ü§ñ Atim authenticated as: {user.login}")
            
            # Test repository access
            self.repo = self.github.get_repo(self.repo_name)
            print(f"‚úÖ Atim can access repository: {self.repo.full_name}")
            
        except GithubException as e:
            print(f"‚ùå Atim GitHub authentication failed: {e}")
            self.github = None
            self.repo = None
    
    def create_issue(self, title: str, description: str, labels: List[str] = None, 
                    severity: str = "medium", category: str = "enhancement") -> Optional[int]:
        """Create a GitHub issue as Atim"""
        if not self.repo:
            print("‚ùå Atim cannot access GitHub repository")
            return None
            
        try:
            # Prepare issue body with Atim's signature
            body = f"""
{description}

**Analysis Details:**
- **Severity:** {severity}
- **Category:** {category}
- **Detected by:** Atim AI Assistant
- **Timestamp:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

{self.bot_signature}
            """.strip()
            
            # Create the issue
            issue = self.repo.create_issue(
                title=title,
                body=body,
                labels=labels or []
            )
            
            print(f"ü§ñ Atim created issue: #{issue.number} - {title}")
            return issue.number
            
        except GithubException as e:
            print(f"‚ùå Atim failed to create issue: {e}")
            return None
    
    def create_pull_request(self, title: str, body: str, branch: str, 
                          base: str = "main") -> Optional[int]:
        """Create a pull request as Atim"""
        if not self.repo:
            print("‚ùå Atim cannot access GitHub repository")
            return None
            
        try:
            # Prepare PR body with Atim's signature
            pr_body = f"""
{body}

**AI-Generated Changes:**
This pull request was automatically generated by Atim AI Assistant based on code analysis and issue detection.

{self.bot_signature}
            """.strip()
            
            # Create the pull request
            pr = self.repo.create_pull(
                title=title,
                body=pr_body,
                head=branch,
                base=base
            )
            
            print(f"ü§ñ Atim created PR: #{pr.number} - {title}")
            return pr.number
            
        except GithubException as e:
            print(f"‚ùå Atim failed to create PR: {e}")
            return None
    
    def comment_on_issue(self, issue_number: int, comment: str) -> bool:
        """Comment on an issue as Atim"""
        if not self.repo:
            return False
            
        try:
            issue = self.repo.get_issue(issue_number)
            issue.create_comment(f"{comment}\n\n{self.bot_signature}")
            print(f"ü§ñ Atim commented on issue #{issue_number}")
            return True
        except GithubException as e:
            print(f"‚ùå Atim failed to comment: {e}")
            return False
    
    def get_repository_stats(self) -> Dict:
        """Get repository statistics as Atim"""
        if not self.repo:
            return {
                'name': self.repo_name,
                'bot_status': 'offline',
                'open_issues': 0,
                'open_pulls': 0,
                'stars': 0,
                'forks': 0
            }
        
        try:
            return {
                'name': self.repo.full_name,
                'bot_status': 'online',
                'bot_username': self.github.get_user().login,
                'open_issues': self.repo.open_issues_count,
                'open_pulls': len(list(self.repo.get_pulls(state='open'))),
                'stars': self.repo.stargazers_count,
                'forks': self.repo.forks_count,
                'language': self.repo.language or 'C++'
            }
        except GithubException as e:
            print(f"‚ùå Atim failed to get stats: {e}")
            return {'bot_status': 'error'}
    
    def analyze_repository(self) -> List[Dict]:
        """Analyze repository and generate issue proposals as Atim"""
        if not self.repo:
            return []
        
        proposals = []
        
        try:
            # Get recent commits
            commits = list(self.repo.get_commits()[:10])
            
            # Analyze for potential issues
            for commit in commits:
                if "fix" in commit.commit.message.lower():
                    proposals.append({
                        'type': 'fix',
                        'title': f"Review fix in commit: {commit.sha[:7]}",
                        'description': f"Commit message: {commit.commit.message}",
                        'severity': 'medium',
                        'category': 'code-review'
                    })
            
            # Add some AI-generated proposals
            proposals.extend([
                {
                    'type': 'ai-analysis',
                    'title': 'Implement comprehensive error handling',
                    'description': 'Code analysis suggests adding try-catch blocks in critical sections',
                    'severity': 'high',
                    'category': 'security'
                },
                {
                    'type': 'ai-analysis', 
                    'title': 'Add unit tests for core functionality',
                    'description': 'AI detected missing test coverage in blockchain core modules',
                    'severity': 'medium',
                    'category': 'testing'
                }
            ])
            
        except GithubException as e:
            print(f"‚ùå Atim failed to analyze repository: {e}")
        
        return proposals

def create_atim_bot() -> AtimGitHubBot:
    """Create Atim's GitHub bot instance"""
    return AtimGitHubBot()

# Test function
def test_atim_bot():
    """Test Atim's GitHub bot functionality"""
    print("ü§ñ Testing Atim GitHub Bot...")
    print("=" * 50)
    
    bot = create_atim_bot()
    
    # Test repository access
    stats = bot.get_repository_stats()
    print(f"Repository: {stats.get('name', 'Unknown')}")
    print(f"Bot Status: {stats.get('bot_status', 'Unknown')}")
    
    if stats.get('bot_status') == 'online':
        print("‚úÖ Atim bot is online and ready!")
        
        # Test issue creation (optional)
        # issue_number = bot.create_issue(
        #     title="Test Issue from Atim Bot",
        #     description="This is a test issue created by Atim AI Assistant.",
        #     labels=["test", "ai-generated"]
        # )
        # if issue_number:
        #     print(f"‚úÖ Test issue created: #{issue_number}")
        
    else:
        print("‚ùå Atim bot is offline. Check ATIM_GITHUB_TOKEN configuration.")
    
    print("=" * 50)

if __name__ == "__main__":
    test_atim_bot() 